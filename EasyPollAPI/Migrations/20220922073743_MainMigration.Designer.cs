// <auto-generated />
using System;
using EasyPollAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyPollAPI.Migrations
{
    [DbContext(typeof(EasyPollContext))]
    [Migration("20220922073743_MainMigration")]
    partial class MainMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EasyPollAPI.Models.PollGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CurrentQuestionOrder")
                        .HasColumnType("int");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("PollGames");
                });

            modelBuilder.Entity("EasyPollAPI.Models.PollGameStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PollGameStatusTypes");
                });

            modelBuilder.Entity("EasyPollAPI.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PollGameId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PollGameId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EasyPollAPI.Models.QuestionAlternative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AlternativeText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAlternatives");
                });

            modelBuilder.Entity("EasyPollAPI.Models.TempUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PollGameId")
                        .HasColumnType("int");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PollGameId");

                    b.ToTable("TempUsers");
                });

            modelBuilder.Entity("EasyPollAPI.Models.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("QuestionAlternativeId")
                        .HasColumnType("int");

                    b.Property<int?>("TempUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionAlternativeId");

                    b.HasIndex("TempUserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("EasyPollAPI.Models.PollGame", b =>
                {
                    b.HasOne("EasyPollAPI.Models.PollGameStatusType", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EasyPollAPI.Models.Question", b =>
                {
                    b.HasOne("EasyPollAPI.Models.PollGame", "PollGame")
                        .WithMany("Questions")
                        .HasForeignKey("PollGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollGame");
                });

            modelBuilder.Entity("EasyPollAPI.Models.QuestionAlternative", b =>
                {
                    b.HasOne("EasyPollAPI.Models.Question", "Question")
                        .WithMany("QuestionAlternatives")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EasyPollAPI.Models.TempUser", b =>
                {
                    b.HasOne("EasyPollAPI.Models.PollGame", "PollGame")
                        .WithMany("TempUsers")
                        .HasForeignKey("PollGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PollGame");
                });

            modelBuilder.Entity("EasyPollAPI.Models.UserAnswer", b =>
                {
                    b.HasOne("EasyPollAPI.Models.QuestionAlternative", "QuestionAlternative")
                        .WithMany()
                        .HasForeignKey("QuestionAlternativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyPollAPI.Models.TempUser", "TempUser")
                        .WithMany()
                        .HasForeignKey("TempUserId");

                    b.Navigation("QuestionAlternative");

                    b.Navigation("TempUser");
                });

            modelBuilder.Entity("EasyPollAPI.Models.PollGame", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TempUsers");
                });

            modelBuilder.Entity("EasyPollAPI.Models.Question", b =>
                {
                    b.Navigation("QuestionAlternatives");
                });
#pragma warning restore 612, 618
        }
    }
}
